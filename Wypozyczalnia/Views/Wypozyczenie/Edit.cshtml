@model Wypozyczalnia.Models.WypozyczenieModel

@{
    ViewData["Title"] = "Edycja wypozyczenia";
}

<h3>Czy na pewno chcesz edytować to wypożyczenie?</h3>
<hr />



<div class="row">
    <div class="col-md-4">
        

        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <label class="control-label">Nazwa sprzętu</label>
            <input type="text" class="form-control" value="@Model.Sprzet.SprzetNazwa" readonly />


            <input type="hidden" asp-for="WypozyczenieId" />
            <input type="hidden" asp-for="SprzetId" id="sprzetSelect" />
            <input type="hidden" asp-for="UserId" />
            <input type="hidden" asp-for="Status" />

            <div class="form-group">
                <label asp-for="DataWypozyczenia" class="control-label"></label>
                <input asp-for="DataWypozyczenia" class="form-control" id="dataWypozyczeniaInput" readonly />
                <span asp-validation-for="DataWypozyczenia" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DataZwrotu" class="control-label"></label>
                <input asp-for="DataZwrotu" class="form-control" id="dataZwrotuInput" />
                <span asp-validation-for="DataZwrotu" class="text-danger"></span>
            </div>
            
            <div class="form-group">
                <label asp-for="CenaCalkowita" class="control-label"></label>
                <input asp-for="CenaCalkowita" class="form-control" id="cenaCalkowitaInput" />
                <span asp-validation-for="CenaCalkowita" class="text-danger"></span>
            </div>
           <br />
            <div class="form-group">

                <input type="submit" value="Save" class="btn btn-primary" />
                <button class="btn btn-danger" type="button" onclick="location.href='@Url.Action("Index", "Wypozyczenie")'">Powrót do listy</button>
            </div>
        </form>
    </div>
</div>



@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
 <script>
    // Get the input elements
    var dataWypozyczeniaInput = document.getElementById('dataWypozyczeniaInput');
    var dataZwrotuInput = document.getElementById('dataZwrotuInput');

    // Attach change event listeners
    dataWypozyczeniaInput.addEventListener('change', validateDates);
    dataZwrotuInput.addEventListener('change', validateDates);

    function validateDates() {
        var dataWypozyczenia = new Date(dataWypozyczeniaInput.value);
        var dataZwrotu = new Date(dataZwrotuInput.value);
        var today = new Date();
        today.setHours(0, 0, 0, 0);

        var isValid = true;
        var errorMessage = '';



        if (dataZwrotu <= dataWypozyczenia) {
            isValid = false;
            errorMessage += 'Data zwrotu musi być późniejsza niż data wypożyczenia.\n';
        }

        if (!isValid) {
            alert(errorMessage);
            
            if (dataZwrotuInput < today) {
                dataZwrotuInput.focus();
            } 
        }
    }
</script>

<script>
     document.addEventListener("DOMContentLoaded", function () {
         // Pobieranie referencji do elementów
         const sprzetSelect = document.getElementById('sprzetSelect');
         const dataWypozyczeniaInput = document.getElementById('dataWypozyczeniaInput');
         const dataZwrotuInput = document.getElementById('dataZwrotuInput');
         const cenaCalkowitaInput = document.getElementById('cenaCalkowitaInput');

         // Pobieranie słownika ViewBag.CenySprzetu z kontrolera
         const cenySprzetu = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.CenySprzetu));

         // Aktualizowanie ceny
         function updateCenaCalkowita() {
             // Przypisanie wartości
             const sprzetId = sprzetSelect.value;
             const dataWypozyczenia = new Date(dataWypozyczeniaInput.value);
             const dataZwrotu = new Date(dataZwrotuInput.value);

             if (sprzetId && dataWypozyczenia && dataZwrotu && cenySprzetu[sprzetId]) {
                 const cenaZaDzien = cenySprzetu[sprzetId];

                 const liczbaDni = Math.ceil((dataZwrotu - dataWypozyczenia) / (1000 * 60 * 60 * 24));
                 const cenaCalkowita = liczbaDni * cenaZaDzien;
                 cenaCalkowitaInput.value = cenaCalkowita.toFixed(2);
             } else {
                 cenaCalkowitaInput.value = '';
             }
         }

         // Dodanie event listenerów do elementów
         dataWypozyczeniaInput.addEventListener('change', updateCenaCalkowita);
         dataZwrotuInput.addEventListener('change', updateCenaCalkowita);

         // Wywołanie funkcji, aby zaktualizować cenę początkową
         updateCenaCalkowita();
     });
</script>















